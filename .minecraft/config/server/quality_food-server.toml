#Luck will affect how often each quality will be tried for (10 luck * 0.25 multiplier -> 2.5 rolls, meaning 2 rolls and 50% chance for another)
#Range: 0.0 ~ 10.0
luck_multiplier = 0.25
#The chance of quality crops dropping its own quality (also affects other qualities) - It affects a multiplier which is calculated as: <crop_target_chance> / <quality.chance>Meaning for Gold it would result in a multiplier of 20 (0.6 / 0.03) -> The chances for all qualities would then be: 20 * 0.10 (iron) = 2 (100%) | 20 * 0.03 (gold) = 0.6 (60%) | 20 * 0.005 = 0.1 (10%)
#Range: 0.0 ~ 1.0
crop_target_chance = 0.6
#Multiplier on top of the crop target chance
#Range: 0.0 ~ 100.0
seed_chance_multiplier = 0.25
#Define multipliers to be applied per farmland on crops - Syntax: <index>;<crop>;<farmland>;<multiplier> (the index defines the sequence in which they will be checked - the first matching one is applied)
#Example: ["2;minecraft:wheat;#farmersdelight:terrain;0.75", "3;#minecraft:crops;farmersdelight:rich_soil;1.25"]
farmland_config = []

[IRON]
	#The chance for a quality to occur (with no luck or other bonus)
	#Range: 0.0 ~ 1.0
	chance = 0.10000000149011612
	#By how much the duration of the effect will get multiplied (beneficial) or divided (harmful) for
	#Range: 1.0 ~ 100.0
	duration_multiplier = 1.5
	#The addition (beneficial) or subtraction (harmful) for the probability (chance for the effect to apply)
	#Range: 0.0 ~ 1.0
	probability_addition = 0.10000000149011612
	#The addition (beneficial) or subtraction (harmful) for the amplifier (level of the effect)
	#Range: 0 ~ 255
	amplifier_addition = 1
	#By how much the nutrition will get multiplied for
	#Range: 1.0 ~ 100.0
	nutrition_multiplier = 1.2
	#By how much the saturation will get multiplied for
	#Range: 1.0 ~ 100.0
	saturation_multiplier = 1.2
	#List of effects this rarity can grant (the item can be a tag) (<item>;<effect>;<chance>;<duration>;<amplifier>;<probability>)
	effect_list = []
	#Additive bonus to the chance an ingredient gives (when crafting through a crafting table)
	#This value is divided by the amount of ingredient types (which can have quality) (i.e. 1x diamond & 1x no quality -> total bonus of 0.35 (if diamond provides a bonus of 0.7))
	#Range: 0.0 ~ 1.0
	crating_bonus = 0.15000000596046448

[GOLD]
	#The chance for a quality to occur (with no luck or other bonus)
	#Range: 0.0 ~ 1.0
	chance = 0.029999999329447746
	#By how much the duration of the effect will get multiplied (beneficial) or divided (harmful) for
	#Range: 1.0 ~ 100.0
	duration_multiplier = 2.0
	#The addition (beneficial) or subtraction (harmful) for the probability (chance for the effect to apply)
	#Range: 0.0 ~ 1.0
	probability_addition = 0.20000000298023224
	#The addition (beneficial) or subtraction (harmful) for the amplifier (level of the effect)
	#Range: 0 ~ 255
	amplifier_addition = 2
	#By how much the nutrition will get multiplied for
	#Range: 1.0 ~ 100.0
	nutrition_multiplier = 1.5
	#By how much the saturation will get multiplied for
	#Range: 1.0 ~ 100.0
	saturation_multiplier = 1.5
	#List of effects this rarity can grant (the item can be a tag) (<item>;<effect>;<chance>;<duration>;<amplifier>;<probability>)
	effect_list = []
	#Additive bonus to the chance an ingredient gives (when crafting through a crafting table)
	#This value is divided by the amount of ingredient types (which can have quality) (i.e. 1x diamond & 1x no quality -> total bonus of 0.35 (if diamond provides a bonus of 0.7))
	#Range: 0.0 ~ 1.0
	crating_bonus = 0.4000000059604645

[DIAMOND]
	#The chance for a quality to occur (with no luck or other bonus)
	#Range: 0.0 ~ 1.0
	chance = 0.004999999888241291
	#By how much the duration of the effect will get multiplied (beneficial) or divided (harmful) for
	#Range: 1.0 ~ 100.0
	duration_multiplier = 2.5
	#The addition (beneficial) or subtraction (harmful) for the probability (chance for the effect to apply)
	#Range: 0.0 ~ 1.0
	probability_addition = 0.30000001192092896
	#The addition (beneficial) or subtraction (harmful) for the amplifier (level of the effect)
	#Range: 0 ~ 255
	amplifier_addition = 3
	#By how much the nutrition will get multiplied for
	#Range: 1.0 ~ 100.0
	nutrition_multiplier = 1.8
	#By how much the saturation will get multiplied for
	#Range: 1.0 ~ 100.0
	saturation_multiplier = 1.8
	#List of effects this rarity can grant (the item can be a tag) (<item>;<effect>;<chance>;<duration>;<amplifier>;<probability>)
	effect_list = []
	#Additive bonus to the chance an ingredient gives (when crafting through a crafting table)
	#This value is divided by the amount of ingredient types (which can have quality) (i.e. 1x diamond & 1x no quality -> total bonus of 0.35 (if diamond provides a bonus of 0.7))
	#Range: 0.0 ~ 1.0
	crating_bonus = 0.699999988079071

[Compatibility]
	#Handle Quark harvest & replant automatically (if you have custom behaviour configured regarding the quality block state turn this off)
	quark_handle_config = true

[Crafting]
	#Define recipes (namespace:path) which should not result in quality being applied (e.g. when the items can be converted back and forth)
	no_quality_recipes = ["minecraft:hay_block", "minecraft:wheat", "quark:building/crafting/compressed/apple_crate", "quark:building/crafting/compressed/apple_crate_uncompress", "quark:building/crafting/compressed/beetroot_crate", "quark:building/crafting/compressed/beetroot_crate_uncompress", "quark:building/crafting/compressed/berry_sack", "quark:building/crafting/compressed/berry_sack_uncompress", "quark:building/crafting/compressed/carrot_crate", "quark:building/crafting/compressed/carrot_crate_uncompress", "quark:building/crafting/compressed/chorus_fruit_block", "quark:building/crafting/compressed/chorus_fruit_block_uncompress", "quark:building/crafting/compressed/cocoa_bean_sack", "quark:building/crafting/compressed/cocoa_bean_sack_uncompress", "quark:building/crafting/compressed/glowberry_sack", "quark:building/crafting/compressed/glowberry_sack_uncompress", "quark:building/crafting/compressed/golden_apple_crate", "quark:building/crafting/compressed/golden_apple_crate_uncompress", "quark:building/crafting/compressed/golden_carrot_crate", "quark:building/crafting/compressed/golden_carrot_crate_uncompress", "quark:building/crafting/compressed/potato_crate", "quark:building/crafting/compressed/potato_crate_uncompress", "quark:building/crafting/compressed/sugar_cane_block", "quark:building/crafting/compressed/sugar_cane_block_uncompress", "farmersdelight:carrot_crate", "farmersdelight:carrot_from_crate", "farmersdelight:potato_crate", "farmersdelight:potato_from_crate", "farmersdelight:beetroot_crate", "farmersdelight:beetroot_from_crate", "farmersdelight:cabbage_crate", "farmersdelight:cabbage", "farmersdelight:tomato_crate", "farmersdelight:tomato", "farmersdelight:onion_crate", "farmersdelight:onion", "farmersdelight:rice_bale", "farmersdelight:rice_panicle", "farmersdelight:rice_bag", "farmersdelight:rice_from_bag", "vinery:white_grape_crate", "vinery:white_grape", "vinery:red_grape_crate", "vinery:red_grape", "vinery:cherry_crate", "vinery:cherries", "vinery:apple_crate", "vinery:apples", "supplementaries:sugar_cube", "supplementaries:sugar_cube_uncrafting"]
	#Define recipes (namespace:path) which should result in the quality should be always be applied to the result (only if all ingredients have the same quality)
	retain_quality_recipes = ["minecraft:pumpkin_seeds", "minecraft:melon_seeds", "minecraft:sugar_from_sugar_cane", "minecraft:sugar_from_honey_bottle", "farmersdelight:tomato_seeds", "farmersdelight:rice", "vinery:seed_from_red_grape", "vinery:seed_from_white_grape", "vinery:seed_from_red_savanna_grape", "vinery:seed_from_white_savanna_grape", "vinery:seed_from_red_taiga_grape", "vinery:seed_from_white_taiga_grape", "vinery:seed_from_red_jungle_grape", "vinery:seed_from_white_jungle_grape"]
	#Defines whether (de)compacting should be handled automatically (in terms of retaining quality)
	handle_compacting = true

